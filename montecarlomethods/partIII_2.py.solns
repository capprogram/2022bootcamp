import numpy.random as npr
import numpy as np
from scipy.special import erf
import matplotlib.pyplot as plt

# notes: probability distribution, its integral, and its reverse lookup
#### next 3 lines are pseudo-code, do not uncomment but use for reference
#### p_g=exp((-1.*u**2)/(2.*sigma**2))/(sigma*sqrt(2.*3.14159))
#### intp_g=0.5+0.5*erf(u/sqrt(2.))
#### u_at_given_intp_g= ??? can't solve analytically, must create lookup table

# choose nran random numbers in uniform interval 0-1
nran = 1000
rngx = npr.default_rng()
xvals = rngx.uniform(size=nran)

# the integral of uniform distribution p_u*dx (=1*dx) from 0 to x is just x
intp_uni = xvals # rename variable for clarity that we have done the integral

# solve for the u values that give the same integrated area under p_g as the randomly chosen xvals
intp_g = intp_uni # set desired integrated area equal to that from uniform distribution
lookupuvals = (np.array([range(0,10000)])-5000)/1000. 
lookupintvals = 0.5+0.5*erf(lookupuvals/np.sqrt(2.))# fill in integral of p_g evaluated at lookupuvals
uvals = np.zeros(nran) # creating uvals array with size equal to number of random values, =0 as placeholder
for i in range(0,nran):
    diffs = abs(lookupintvals-intp_g[i])
    uvals[i] = lookupuvals[np.where(diffs == diffs.min())] # filling in each element of uvals with closest lookup value

# make a histogram
n1, bins1, patches1 = plt.hist(uvals,bins=50,density=1,histtype='stepfilled')
plt.setp(patches1,'facecolor','g','alpha',0.75)
